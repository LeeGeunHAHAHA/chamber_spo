#!/bin/bash
source ../common
GROUP_TITLE="close & open test"
PARAM_FILE=parameter
REPEAT_COUNT=100
POWER_CYCLE_INTERVAL=5

function test1()
{
  AMOUNT_KB=$(((RANDOM % (1024 * 1024 * 8)) * 4096))
  log "write well-known data pattern: LBA_RANGE=0:32gb AMOUNT=byte:$AMOUNT_KB""kb"
  OPERATION="write" LBA_RANGE="0:32gb" AMOUNT="byte:$AMOUNT_KB""kb" run_nbio

  for ((i=1; i<=REPEAT_COUNT; i++))
  do
    printf "[%3d/%3d] " $i $REPEAT_COUNT
    log "----- [$i/$REPEAT_COUNT] begin -----"

    log "shutdown controller..."
    printf "$AE_SAVE_CURSOR""shutting down" $i $REPEAT_COUNT
    shutdown_device
    log "complete!"

    log "initialize controller..."
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL""initializing"
    initialize_device
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL"
    log "complete!"

    log "read and compare data pattern: LBA_RANGE=0:32gb AMOUNT=byte:32g"
    OPERATION="read" LBA_RANGE="0:32gb" AMOUNT="byte:32gb" run_nbio
    log "complete!"

    log "----- [$i/$REPEAT_COUNT] end -----"
    printf "\033[10D$AE_CLEAR_EOL"
  done
}

function test2()
{
  RANDOM=$TEST_NO
  for ((i=1; i<=REPEAT_COUNT; i++))
  do
    printf "[%3d/%3d] " $i $REPEAT_COUNT
    log "----- [$i/$REPEAT_COUNT] begin -----"

    AMOUNT_KB=$(((RANDOM % (1024 * 1024 * 8)) * 4096))
    log "write well-known data pattern: LBA_RANGE=0:32gb AMOUNT=byte:$AMOUNT_KB""kb"
    OPERATION="write" LBA_RANGE="0:32gb" AMOUNT="byte:$AMOUNT_KB""kb" run_nbio
    log "complete!"

    log "shutdown controller..."
    printf "$AE_SAVE_CURSOR$AE_CLEAR_EOL""shutting down"
    shutdown_device
    log "complete!"

    log "initialize controller..."
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL""initializing"
    initialize_device
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL"
    log "complete!"

    log "read and compare data pattern: LBA_RANGE=0:32gb AMOUNT=byte:32g"
    OPERATION="read" LBA_RANGE="0:32gb" AMOUNT="byte:32gb" run_nbio
    log "complete!"

    log "----- [$i/$REPEAT_COUNT] end -----"
    printf "\033[10D$AE_CLEAR_EOL"
  done
}

function test3()
{
  AMOUNT_KB=$(((RANDOM % (1024 * 1024 * 8)) * 4096))
  log "write well-known data pattern: LBA_RANGE=0:32gb AMOUNT=byte:$AMOUNT_KB""kb"
  OPERATION="write" LBA_RANGE="0:32gb" AMOUNT="byte:$AMOUNT_KB""kb" run_nbio

  for ((i=1; i<=REPEAT_COUNT; i++))
  do
    printf "[%3d/%3d] " $i $REPEAT_COUNT
    log "----- [$i/$REPEAT_COUNT] begin -----"

    log "shutdown controller..."
    printf "$AE_SAVE_CURSOR""shutting down"
    shutdown_device
    log "complete!"

    log "power off..."
    power_off
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL""powered off"
    sleep $POWER_CYCLE_INTERVAL
    log "complete!"

    log "power on..."
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL""power on"
    power_on
    log "complete!"

    log "initialize controller..."
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL""initializing"
    initialize_device
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL"
    log "complete!"

    log "read and compare data pattern: LBA_RANGE=0:32gb AMOUNT=byte:32g"
    OPERATION="read" LBA_RANGE="0:32gb" AMOUNT="byte:32gb" run_nbio
    log "complete!"

    log "----- [$i/$REPEAT_COUNT] end -----"
    printf "\033[10D$AE_CLEAR_EOL"
  done
}

function test4()
{
  for ((i=1; i<=REPEAT_COUNT; i++))
  do
    printf "[%3d/%3d] " $i $REPEAT_COUNT
    log "----- [$i/$REPEAT_COUNT] begin -----"

    AMOUNT_KB=$(((RANDOM % (1024 * 1024 * 8)) * 4096))
    log "write well-known data pattern: LBA_RANGE=0:32gb AMOUNT=byte:$AMOUNT_KB""kb"
    OPERATION="write" LBA_RANGE="0:32gb" AMOUNT="byte:$AMOUNT_KB""kb" run_nbio

    log "shutdown controller..."
    printf "$AE_SAVE_CURSOR$AE_CLEAR_EOL""shutting down"
    shutdown_device
    log "complete!"

    log "power off..."
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL""power off"
    power_off
    sleep $POWER_CYCLE_INTERVAL
    log "complete!"

    log "power on..."
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL""power on"
    power_on
    log "complete!"

    log "initialize controller..."
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL""initializing"
    initialize_device
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL"
    log "complete!"

    log "read and compare data pattern: LBA_RANGE=0:32gb AMOUNT=byte:32g"
    OPERATION="read" LBA_RANGE="0:32gb" AMOUNT="byte:32gb" run_nbio
    log "complete!"

    log "----- [$i/$REPEAT_COUNT] end -----"
    printf "\033[10D$AE_CLEAR_EOL"
  done
}

function close_open()
{
    printf "$AE_SAVE_CURSOR$AE_CLEAR_EOL""shutting down"
    shutdown_device
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL""initializing"
    initialize_device
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL"
}

function power_cycle()
{
    printf "$AE_SAVE_CURSOR""shutting down"
    shutdown_device
    power_off
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL""powered off"
    sleep $POWER_CYCLE_INTERVAL
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL""power on"
    power_on
    printf "$AE_RESTORE_CURSOR$AE_CLEAR_EOL""initializing"
    initialize_device
    printf "$AE_RESTORE_CURSOR\033[10D$AE_CLEAR_EOL"
}

group_init $@

run_config
TITLE="w/o power cycle, w/o data write" run_custom test1
TITLE="w/o power cycle, w/ data write" run_custom test2
TITLE="w/ power cycle, w/o data write" run_custom test3
TITLE="w/ power cycle, w/ data write" run_custom test4
#PRETEST_EVENT=close_open TITLE_PREFIX="w/o power cycle, " run_groups ../3.mixed ../4.mt_mixed
#PRETEST_EVENT=power_cycle TITLE_PREFIX="w/ power cycle, " run_groups ../3.mixed ../4.mt_mixed

