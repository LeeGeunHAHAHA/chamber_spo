#!/bin/bash
DEV_NAME=/dev/nvme0n1
NSID=1
VU_COMMON_OPCODE=0xC3
VU_SUB_OPCODE_SELFHCK_GET_INFO=0x80090001
VU_SUB_OPCODE_SELFCHK_READ_MAP=0x80090101
VU_SUB_OPCODE_SELFCHK_READ_BITMAP=0x80090201
VU_SUB_OPCODE_SELFCHK_READ_VC=0x80090301
DATA_LEN_BYTE=1048576  # 1M
PARAM0=0x00
PARAM1=0X00
PARAM2=0X00
PARAM3=0X00
NDT=$[$DATA_LEN_BYTE/4]

# DEFAULT DEVICE INFOMATION
DEV_INFO_SIZE=512
MB_PER_LBA=262144

# FILE INFORMATION
DEV_INFO_FILE=../dev_info.out
MAP_FILE=../map.out
BITMAP_FILE=../bitmap.out
VC_FILE=../vc.out

function read_get_information()
{
	nvme io-passthru $DEV_NAME --opcode $VU_COMMON_OPCODE --namespace-id $NSID \
	--cdw2=$VU_SUB_OPCODE_SELFHCK_GET_INFO --read --raw-binary --data-len=$DEV_INFO_SIZE --cdw10=$[$DEV_INFO_SIZE/4] \
	--cdw12=$PARAM0 --cdw13=$PARAM1 --cdw14=$PARAM2 --cdw15=$PARAM3 >> $DEV_INFO_FILE

	string=$(hexdump -v -e '/4 "0x%08X\n"' $DEV_INFO_FILE)
	array=(${string//' '/ })

	MAGIC_NUMBER=${array[0]}
	MAGIC_NUMBER=$(($MAGIC_NUMBER))

	MAX_LBA=${array[1]}
	MAX_LBA=$(($MAX_LBA))

	MAX_BITMAP_SIZE=${array[2]}
	MAX_BITMAP_SIZE=$(($MAX_BITMAP_SIZE))

	MAX_VC_SIZE=${array[3]}
	MAX_VC_SIZE=$(($MAX_VC_SIZE))

	FTL_NOTIFY_GROUP_OFFSET=${array[4]}
	FTL_NOTIFY_GROUP_OFFSET=$(($FTL_NOTIFY_GROUP_OFFSET))

	if [ $MAGIC_NUMBER -ne 1263027027 ]; then
	   echo "MAGIC NUMBER is Invalid!!!"
	   exit 1
	fi
}

function read_map_table()
{
	for ((lba=0; lba < MAX_LBA; lba+=MB_PER_LBA))
	do
		nvme io-passthru $DEV_NAME --opcode $VU_COMMON_OPCODE --namespace-id $NSID \
		--cdw2=$VU_SUB_OPCODE_SELFCHK_READ_MAP --read --raw-binary --data-len=$DATA_LEN_BYTE --cdw10=$NDT \
		--cdw12=$lba --cdw13=$PARAM1 --cdw14=$PARAM2 --cdw15=$PARAM3 >> $MAP_FILE
	done
}

function read_bitmap_table()
{
	if [ $MAX_BITMAP_SIZE -ne 0 ]; then
		for ((bmap_offset=0; bmap_offset < MAX_BITMAP_SIZE; bmap_offset+=DATA_LEN_BYTE))
		do
			nvme io-passthru $DEV_NAME --opcode $VU_COMMON_OPCODE --namespace-id $NSID \
			--cdw2=$VU_SUB_OPCODE_SELFCHK_READ_BITMAP --read --raw-binary --data-len=$DATA_LEN_BYTE --cdw10=$NDT \
			--cdw12=$bmap_offset --cdw13=$PARAM1 --cdw14=$PARAM2 --cdw15=$PARAM3 >> $BITMAP_FILE
		done
	else
		touch ../bitmap.out
		BITMAP_FILE=../bitmap.out
	fi
}

function read_vc_table()
{
	nvme io-passthru $DEV_NAME --opcode $VU_COMMON_OPCODE --namespace-id $NSID \
	 --cdw2=$VU_SUB_OPCODE_SELFCHK_READ_VC --read --raw-binary --data-len=$MAX_VC_SIZE --cdw10=$[$MAX_VC_SIZE/4] \
	 --cdw12=$PARAM0 --cdw13=$PARAM1 --cdw14=$PARAM2 --cdw15=$PARAM3 >> $VC_FILE
}

function check_ftl_meta_data()
{
	# Clear previous output files
	rm -rf ../*.out
		
	# READ Get information
	read_get_information

	# READ MAP
	read_map_table

	# READ BITMAP
	read_bitmap_table

	# READ VC
	read_vc_table

	# Lauch check application
	ftl_checker $MAP_FILE $BITMAP_FILE $VC_FILE $MAX_LBA $MAX_BITMAP_SIZE $MAX_VC_SIZE $FTL_NOTIFY_GROUP_OFFSET
	CHK_RET=$?
	if [ $CHK_RET -eq 180 ]; then
		echo "Failed to check FTL integrity"
		exit
	fi
}

