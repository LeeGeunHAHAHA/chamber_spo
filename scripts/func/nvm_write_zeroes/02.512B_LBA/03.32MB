#!/usr/bin/env bash
source ../../common > /dev/null 2>&1

# initialize
nvme delete-ns $FQA_DEVICE -n 0xffffffff
nvme create-ns $FQA_DEVICE -s 0x100000 -c 0x100000 -f 0
nvme attach-ns $FQA_DEVICE -n 1 -c $CTRL_ID

nvme id-ns $FQA_DEVICE -n 1 | grep "in use"

rescan-ns

# TODO: remove below lines if the newly created namespace is filled with unwritten lba
nvme dsm $FQA_DEVICE -n 1 -s 0 -b 0x10100 -ad
nvme dsm $FQA_DEVICE -n 1 -s 0x70000 -b 0x20000 -ad

# write zeroes(to unwritten lba)
nvme write-zeroes $FQA_DEVICE -n 1 -s 0 -c 0xffff

# read and verify - success with zeroes
nvme read $FQA_DEVICE -n 1 -s 0 -c 0 -z 4 | xxd -p -l 4
nvme read $FQA_DEVICE -n 1 -s 0xffff -c 0 -z 4 | xxd -p -l 4

# read and verify - success with non-zero
nvme read $FQA_DEVICE -n 1 -s 0x10000 -c 0 -z 4 | xxd -p -l 4

# write data
echo "abcd" | nvme write $FQA_DEVICE -n 1 -s 0x80000 -c 0 -z 4

# read and verify - success with non-zero
nvme read $FQA_DEVICE -n 1 -s 0x80000 -c 0 -z 4 | xxd -p -l 4

# write zeroes(to written lba)
nvme write-zeroes $FQA_DEVICE -n 1 -s 0x80000 -c 0xffff

# read and verify - success with zeroes
nvme read $FQA_DEVICE -n 1 -s 0x80000 -c 0 -z 4 | xxd -p -l 4

# write zeroes(again)
nvme write-zeroes $FQA_DEVICE -n 1 -s 0x80000 -c 0xffff                 # 0x80000 - 0x8ffff

# read and verify - success with zeroes
nvme read $FQA_DEVICE -n 1 -s 0x80000 -c 0 -z 4 | xxd -p -l 4

# read neighborhood lbas - success with non-zero
nvme read $FQA_DEVICE -n 1 -s 0x7ffff -c 0 -z 4 | xxd -p -l 4
nvme read $FQA_DEVICE -n 1 -s 0x90000 -c 0 -z 4 | xxd -p -l 4

